#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D inputImage;
layout(rgba32f, binding = 1) uniform image2D outputImage;

/*
	static.frag
	by Spatial
	05 July 2013
*/

uniform float time;
out vec4 fragment;



// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash(uint x)
{
	x += (x << 10u);
	x ^= (x >> 6u);
	x += (x << 3u);
	x ^= (x >> 11u);
	x += (x << 15u);
	return x;
}



// Compound versions of the hashing algorithm I whipped together.
uint hash(uvec2 v) { return hash(v.x ^ hash(v.y)); }
uint hash(uvec3 v) { return hash(v.x ^ hash(v.y) ^ hash(v.z)); }
uint hash(uvec4 v) { return hash(v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w)); }



// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct(uint m)
{
	const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
	const uint ieeeOne = 0x3F800000u; // 1.0 in IEEE binary32

	m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
	m |= ieeeOne;                          // Add fractional part to 1.0

	float  f = uintBitsToFloat(m);       // Range [1:2]
	return f - 1.0;                        // Range [0:1]
}



// Pseudo-random value in half-open range [0:1].
float rand(float x) { return floatConstruct(hash(floatBitsToUint(x))); }
float rand(vec2  v) { return floatConstruct(hash(floatBitsToUint(v))); }
float rand(vec3  v) { return floatConstruct(hash(floatBitsToUint(v))); }
float rand(vec4  v) { return floatConstruct(hash(floatBitsToUint(v))); }

int randrange(int min, int max, vec2 co)
{
	return int(floor(rand(co) * ( float(max) - float(min) + 1.0 ) + float(max) ));
}

vec4 getPixel(ivec2 pos)
{
	int a = 10;
	return imageLoad(inputImage, ivec2(a * floor(pos.x/a), a * floor(pos.y / a)));
}

void main()
{
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(gl_NumWorkGroups.xy);

	ivec2 halfsize = ivec2(25, 55);
	ivec2 halfsize2 = ivec2(10, 10);

	vec3 pixelin = getPixel(texelCoord).rgb;
	vec3 randpixel = getPixel(
		ivec2(
			randrange((texelCoord - halfsize).x, (texelCoord + halfsize).x, texelCoord),
			randrange((texelCoord - halfsize).y, (texelCoord + halfsize).y, texelCoord)
		)
	).rgb;
	vec3 randpixel2 = getPixel(
		ivec2(
			randrange((texelCoord - halfsize2).x, (texelCoord + halfsize2).x, texelCoord),
			randrange((texelCoord - halfsize2).y, (texelCoord + halfsize2).y, texelCoord)
		)
	).rgb;

	int offset = 35;
	vec3 tp = getPixel(texelCoord + ivec2( 0, -1) * offset).rgb;
	vec3 bp = getPixel(texelCoord + ivec2( 0,  1) * offset).rgb;
	vec3 lp = getPixel(texelCoord + ivec2(-1,  0) * offset).rgb;
	vec3 rp = getPixel(texelCoord + ivec2( 1,  0) * offset).rgb;

	int circleX = size.x / 2;
	int circleY = size.y / 2;
	int circleR = 2000;
	vec4 value;
	if (1.0/2.0 * pow(float(texelCoord.x) - float(circleX), 2.0) + pow(float(texelCoord.y) - float(circleY), 2.0) <= pow(float(circleR), 2.0))
	{
		value = vec4(pixelin * 1.84 * randpixel2 * 1.5 + pixelin * 0.3 * 0.689, 1.0);
	}
	else
	{
		value = vec4((randpixel * 1.1 + rp * 0.6 + tp * 0.6) * randpixel + pixelin * 0.3, 1.0);
	}

	imageStore(outputImage, texelCoord, value);
}