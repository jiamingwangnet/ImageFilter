//metastart
//name: pixels 
//uniform<int>_pixelateFactor: 5
//uniform<int>_colorStep: 0.09
//uniform<float>_contrast: 0.3
//uniform<float>_noiseIntensity: 0.06
//uniform<float>_brightness: 0.3
//uniform<int>_equation: 0
//uniform<float>_vloga: 2.0
//uniform<float>_vlogb: 2.2
//uniform<float>_vlogc: 0.8
//uniform<float>_vlogd: 0.2
//metaend

#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D inputImage;
layout(rgba32f, binding = 1) uniform image2D outputImage;

uniform int pixelateFactor;
uniform float colorStep;
uniform float contrast;
uniform float brightness;
uniform float noiseIntensity;
uniform int equation; // 0 = linear 1 = log
uniform float vloga;
uniform float vlogb;
uniform float vlogc;
uniform float vlogd;

/*
	static.frag
	by Spatial
	05 July 2013
*/

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash(uint x)
{
	x += (x << 10u);
	x ^= (x >> 6u);
	x += (x << 3u);
	x ^= (x >> 11u);
	x += (x << 15u);
	return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash(uvec2 v) { return hash(v.x ^ hash(v.y)); }
uint hash(uvec3 v) { return hash(v.x ^ hash(v.y) ^ hash(v.z)); }
uint hash(uvec4 v) { return hash(v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w)); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct(uint m)
{
	const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
	const uint ieeeOne = 0x3F800000u; // 1.0 in IEEE binary32

	m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
	m |= ieeeOne;                          // Add fractional part to 1.0

	float  f = uintBitsToFloat(m);       // Range [1:2]
	return f - 1.0;                        // Range [0:1]
}



// Pseudo-random value in half-open range [0:1].
float rand(float x) { return floatConstruct(hash(floatBitsToUint(x))); }
float rand(vec2  v) { return floatConstruct(hash(floatBitsToUint(v))); }
float rand(vec3  v) { return floatConstruct(hash(floatBitsToUint(v))); }
float rand(vec4  v) { return floatConstruct(hash(floatBitsToUint(v))); }

ivec2 pixelate(ivec2 pos)
{
	return ivec2(pixelateFactor * floor(pos.x / pixelateFactor), pixelateFactor * floor(pos.y / pixelateFactor));
}

vec4 stepColor(vec4 color)
{
    return vec4(
        colorStep * floor(color.r / colorStep), 
        colorStep * floor(color.g / colorStep),
        colorStep * floor(color.b / colorStep),
        1.0
        );
}

vec4 getPixel(ivec2 pos)
{
	return imageLoad(inputImage, pixelate(pos));
}

const float c1 = 259.0/256.0;
const float c2 = 255.0/256.0;

void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(gl_NumWorkGroups.xy);

    ivec2 pcoord = pixelate(texelCoord);
    vec4 c = getPixel(texelCoord);

    if(equation == 1) c = vloga * log(vlogb * c + vec4(vlogc)) + vec4(vlogd);
    
    float f = (c1 * (contrast + c2)) / (c2 * (c2 - contrast));
    vec4 value = clamp(f * (c - 0.5) + 0.5 + brightness, 0.0, 1.0);

    value += vec4(noiseIntensity * rand(c), noiseIntensity * rand(c * 2), noiseIntensity * rand(c * 3), 0.0);

    imageStore(outputImage, texelCoord, stepColor(value));
}